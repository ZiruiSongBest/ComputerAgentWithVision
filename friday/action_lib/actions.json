{
    "open_chrome": {
        "code": "\nfrom friday.action.base_action import BaseAction\nimport subprocess\n\nclass open_chrome(BaseAction):\n    def __init__(self):\n        self._description = \"Execute a system command to open Google Chrome on macOS.\"\n\n    def __call__(self, *args, **kwargs):\n        \"\"\"\n        Executes the system command to open Google Chrome on macOS.\n\n        Args:\n            *args: Variable length argument list.\n            **kwargs: Arbitrary keyword arguments.\n\n        Returns:\n            None, but prints a message confirming the execution of the command.\n        \"\"\"\n        try:\n            subprocess.run(['open', '-a', 'Google Chrome'], check=True)\n            print(\"Google Chrome has been successfully opened.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to open Google Chrome: {e}\")\n\n# Example of how to use the class (Do not directly copy this line into your code):\n# open_chrome()()\n",
        "description": "Execute a system command to open Google Chrome on macOS."
    },
    "open_chrome_and_navigate": {
        "code": "\nfrom friday.action.base_action import BaseAction\nimport subprocess\n\nclass open_chrome_and_navigate(BaseAction):\n    def __init__(self):\n        self._description = \"Execute a system command to open Google Chrome on macOS and navigate to a specified URL.\"\n\n    def __call__(self, url=\"http://youtube.com\", *args, **kwargs):\n        \"\"\"\n        Executes the system command to open Google Chrome on macOS and navigates to the specified URL.\n\n        Args:\n            url (str): The URL to navigate to. Defaults to \"http://youtube.com\".\n            *args: Variable length argument list.\n            **kwargs: Arbitrary keyword arguments.\n\n        Returns:\n            None, but prints a message confirming the execution of the command.\n        \"\"\"\n        try:\n            subprocess.run(['open', '-a', 'Google Chrome', url], check=True)\n            print(f\"Google Chrome has been successfully opened and navigated to {url}.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to open Google Chrome and navigate to {url}: {e}\")\n",
        "description": "Execute a system command to open Google Chrome on macOS and navigate to a specified URL."
    },
    "open_chrome_and_navigate_to_youtube": {
        "code": "\nfrom friday.action.base_action import BaseAction\nimport subprocess\n\nclass open_chrome_and_navigate_to_youtube(BaseAction):\n    def __init__(self):\n        self._description = \"Execute a system command to open Google Chrome on macOS and navigate to youtube.com.\"\n\n    def __call__(self, *args, **kwargs):\n        \"\"\"\n        Executes the system command to open Google Chrome on macOS and navigates to youtube.com.\n\n        Args:\n            *args: Variable length argument list.\n            **kwargs: Arbitrary keyword arguments.\n\n        Returns:\n            None, but prints a message confirming the execution of the command.\n        \"\"\"\n        url = \"http://youtube.com\"\n        try:\n            subprocess.run(['open', '-a', 'Google Chrome', url], check=True)\n            print(f\"Google Chrome has been successfully opened and navigated to {url}.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to open Google Chrome and navigate to {url}: {e}\")\n",
        "description": "Execute a system command to open Google Chrome on macOS and navigate to youtube.com."
    },
    "create_excel_file": {
        "code": "\nfrom friday.action.base_action import BaseAction\nimport xlsxwriter\nimport os\n\nclass create_excel_file(BaseAction):\n    def __init__(self):\n        self._description = \"Create a new Excel file in the specified directory with a given name.\"\n\n    def __call__(self, directory, file_name, *args, **kwargs):\n        \"\"\"\n        Creates a new Excel file in the specified directory with the given file name.\n\n        Args:\n            directory (str): The directory where the Excel file will be created.\n            file_name (str): The name of the Excel file to be created, including the .xlsx extension.\n            *args: Variable length argument list.\n            **kwargs: Arbitrary keyword arguments.\n\n        Returns:\n            None, but prints a message confirming the creation of the Excel file.\n        \"\"\"\n        # Ensure the directory exists\n        if not os.path.exists(directory):\n            os.makedirs(directory)\n        \n        # Change the current working directory to the specified directory\n        os.chdir(directory)\n        \n        # Create the Excel file\n        try:\n            workbook = xlsxwriter.Workbook(file_name)\n            workbook.close()\n            print(f\"Excel file '{file_name}' has been successfully created in {directory}.\")\n        except Exception as e:\n            print(f\"Failed to create Excel file '{file_name}' in {directory}: {e}\")\n",
        "description": "Create a new Excel file in the specified directory with a given name."
    },
    "add_new_sheet": {
        "code": "\nfrom friday.action.base_action import BaseAction\nimport openpyxl\nimport os\n\nclass add_new_sheet(BaseAction):\n    def __init__(self):\n        self._description = \"Add a new sheet to an existing Excel file and name the new sheet as desired.\"\n\n    def __call__(self, file_path, sheet_name, *args, **kwargs):\n        \"\"\"\n        Adds a new sheet to the specified Excel file with the given sheet name.\n\n        Args:\n            file_path (str): The path to the Excel file where the new sheet will be added.\n            sheet_name (str): The name of the new sheet to be added.\n            *args: Variable length argument list.\n            **kwargs: Arbitrary keyword arguments.\n\n        Returns:\n            None, but prints a message confirming the addition of the new sheet.\n        \"\"\"\n        # Ensure the Excel file exists\n        if not os.path.exists(file_path):\n            print(f\"Excel file '{file_path}' does not exist.\")\n            return\n        \n        try:\n            # Load the workbook and add a new sheet\n            workbook = openpyxl.load_workbook(file_path)\n            workbook.create_sheet(title=sheet_name)\n            workbook.save(file_path)\n            print(f\"New sheet '{sheet_name}' has been successfully added to {file_path}.\")\n        except Exception as e:\n            print(f\"Failed to add new sheet '{sheet_name}' to {file_path}: {e}\")\n",
        "description": "Add a new sheet to an existing Excel file and name the new sheet as desired."
    }
}